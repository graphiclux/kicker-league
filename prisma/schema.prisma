generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String       @id @default(cuid())
  email                 String       @unique
  name                  String?
  createdAt             DateTime     @default(now())

  // Many-to-many: users <-> leagues (membership)
  leagues               League[]     @relation("LeagueMembers")

  // One-to-many: a user owns many league teams
  teams                 LeagueTeam[] @relation("UserTeams")

  // One-to-many: a user can be commissioner of many leagues
  commissionedLeagues   League[]     @relation("CommissionerOf")
}

model League {
  id             String       @id @default(cuid())
  name           String
  seasonYear     Int
  maxTeams       Int          @default(32)

  // Commissioner (one user) with a named relation
  commissionerId String
  commissioner   User         @relation("CommissionerOf", fields: [commissionerId], references: [id])

  // Members (many users) â€” back side of the m2m
  members        User[]       @relation("LeagueMembers")

  // Teams in this league
  teams          LeagueTeam[]

  // Scores (by team per week)
  scores         Score[]

  createdAt      DateTime     @default(now())
}

model LeagueTeam {
  id        String  @id @default(cuid())

  // League relation
  leagueId  String
  league    League  @relation(fields: [leagueId], references: [id])

  // Which NFL team this fantasy slot represents
  nflTeam   String  // e.g., "BUF", "KC"

  // Owner relation (user who owns this team in the league)
  ownerId   String
  owner     User    @relation("UserTeams", fields: [ownerId], references: [id])

  draftSlot Int

  scores    Score[]

  @@unique([leagueId, nflTeam], name: "league_team_unique")
  @@unique([leagueId, ownerId], name: "league_owner_unique")
}

model Week {
  id        String   @id @default(cuid())
  season    Int
  week      Int
  startsAt  DateTime
  endsAt    DateTime

  @@unique([season, week], name: "season_week")
}

model KickPlay {
  id         String   @id @default(cuid())
  season     Int
  week       Int
  gameId     String
  possession String    // team abbr attempting the kick
  playType   String    // "field_goal" | "extra_point"
  distance   Int?
  result     String    // "made" | "missed"
  blocked    Boolean   @default(false)
  createdAt  DateTime  @default(now())
}

model Score {
  id           String      @id @default(cuid())

  // League this score belongs to (for filtering)
  leagueId     String
  league       League      @relation(fields: [leagueId], references: [id])

  // Specific fantasy team (league slot) being scored
  leagueTeamId String
  leagueTeam   LeagueTeam  @relation(fields: [leagueTeamId], references: [id])

  season       Int
  week         Int
  points       Int
  breakdown    Json
  createdAt    DateTime    @default(now())

  @@unique([leagueTeamId, season, week])
  @@index([leagueId, season, week])
}
model NflTeam {
  abbr String @id          // e.g. "BUF"
  name String               // e.g. "Buffalo Bills"
}

